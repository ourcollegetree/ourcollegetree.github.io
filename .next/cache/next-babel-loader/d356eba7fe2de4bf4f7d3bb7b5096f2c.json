{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Grid, Form, Button, Input } from 'semantic-ui-react';\nimport React from 'react';\nimport Router, { withRouter } from 'next/router';\nimport { connect } from 'react-redux';\nimport Axios from 'axios';\nimport Api from '../../config/Api';\n\nclass ContactUsComp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onValueChange\", event => {\n      const {\n        name,\n        value\n      } = event.target;\n      const nameErrors = `${name}Errors`;\n      this.setState({\n        [name]: value,\n        [nameErrors]: [],\n        errors: []\n      });\n    });\n\n    _defineProperty(this, \"onSubmit\", () => {\n      const {\n        email,\n        name,\n        phone,\n        feedback\n      } = this.state;\n      Axios.post(Api.contactUs, {\n        name,\n        phone,\n        email\n      }).then(({\n        data\n      }) => {\n        Router.replace('/thankyou');\n      }).catch(({\n        response: {\n          data,\n          status,\n          statusText\n        }\n      }) => {\n        if (status === 400 && data && Object.keys(data).length > 0) {\n          if (Object.prototype.hasOwnProperty.call(data, 'email')) {\n            this.setState({\n              emailErrors: data.email\n            });\n          }\n\n          if (Object.prototype.hasOwnProperty.call(data, 'name')) {\n            this.setState({\n              nameErrors: data.name\n            });\n          }\n\n          if (Object.prototype.hasOwnProperty.call(data, 'phone')) {\n            this.setState({\n              phoneErrors: data.phone\n            });\n          }\n\n          if (Object.prototype.hasOwnProperty.call(data, 'non_field_errors')) {\n            this.setState({\n              errors: data.non_field_errors\n            });\n          }\n        } else {\n          this.setState({\n            errors: [statusText, 'Please try later']\n          });\n        }\n      });\n    });\n\n    this.state = {\n      email: '',\n      name: '',\n      phone: '',\n      feedback: '',\n      emailErrors: [],\n      nameErrors: [],\n      phoneErrors: []\n    };\n    this.onValueChange = this.onValueChange.bind(this);\n  }\n\n  render() {\n    const {\n      email,\n      name,\n      phone,\n      feedback,\n      emailErrors,\n      nameErrors,\n      phoneErrors,\n      errors\n    } = this.state;\n    return __jsx(\"div\", null, __jsx(\"div\", {\n      className: \"contactUsComp\"\n    }, __jsx(\"div\", {\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        bottom: 0,\n        right: 0\n      }\n    }, __jsx(\"div\", {\n      style: {\n        width: '100%',\n        height: '100%',\n        textAlign: 'center',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center'\n      }\n    }, __jsx(\"div\", {\n      style: {\n        width: '80%'\n      },\n      className: \"textOnImg\"\n    }, __jsx(\"p\", {\n      style: {\n        color: 'yellow'\n      }\n    }, \"Contact Us\"), __jsx(Grid, {\n      centered: true,\n      columns: 1\n    }, __jsx(Grid.Column, {\n      mobile: \"16\",\n      tablet: \"12\",\n      computer: \"6\"\n    }, __jsx(Form, {\n      size: \"large\"\n    }, __jsx(Form.Field, null, __jsx(Input, {\n      name: \"email\",\n      value: email,\n      placeholder: \"E-mail\",\n      onChange: this.onValueChange,\n      error: emailErrors.length ? emailErrors.join() : null\n    })), __jsx(Form.Input, {\n      name: \"name\",\n      value: name,\n      placeholder: \"Name\",\n      onChange: this.onValueChange,\n      error: nameErrors.length ? nameErrors : null\n    }), __jsx(Form.Input, {\n      name: \"phone\",\n      value: phone,\n      placeholder: \"Mobile No.\",\n      onChange: this.onValueChange,\n      error: phoneErrors.length ? phoneErrors : null\n    }), __jsx(Form.TextArea, {\n      name: \"feedback\",\n      value: feedback,\n      placeholder: \"Feedback\",\n      onChange: this.onValueChange\n    }), __jsx(Button, {\n      positive: true,\n      fluid: true,\n      size: \"large\",\n      onClick: this.onSubmit\n    }, \"Submit\")))), __jsx(\"br\", null))))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  const {\n    user: {\n      isLoggedIn,\n      userDetails\n    }\n  } = state;\n  return {\n    isLoggedIn,\n    userDetails\n  };\n};\n\nconst mapDispatchToProps = {};\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(ContactUsComp));","map":null,"metadata":{},"sourceType":"module"}