{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Link from 'next/link';\nimport { withRouter } from 'next/router';\nimport { Image, Grid, Form, Input, Message, Header, Divider, Dropdown, TextArea } from 'semantic-ui-react';\n\nvar SignUp = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(SignUp, _React$PureComponent);\n\n  var _super = _createSuper(SignUp);\n\n  function SignUp(props) {\n    var _this;\n\n    _classCallCheck(this, SignUp);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", function (e) {\n      var _this$setState;\n\n      var _e$target = e.target,\n          name = _e$target.name,\n          value = _e$target.value;\n      var nameErrors = \"\".concat(name, \"Errors\");\n\n      _this.setState((_this$setState = {}, _defineProperty(_this$setState, name, value), _defineProperty(_this$setState, nameErrors, []), _defineProperty(_this$setState, \"errors\", []), _this$setState));\n    });\n\n    _this.state = {\n      isLoading: false,\n      email: '',\n      emailErrors: [],\n      password: '',\n      passwordErrors: [],\n      errors: [],\n      college: '',\n      collegeErrors: [],\n      work: '',\n      workErrors: [],\n      name: '',\n      nameErrors: [],\n      collegeOptions: [{\n        key: 1,\n        text: 'Osmania University',\n        value: 'ou'\n      }],\n      course: '',\n      courseErrors: [],\n      specializationOptions: [{\n        key: 1,\n        text: 'Electronics & Communications',\n        value: 'ece'\n      }, {\n        key: 1,\n        text: 'Electrical Engineering',\n        value: 'eee'\n      }, {\n        key: 1,\n        text: 'Mechanical Engineering',\n        value: 'mech'\n      }, {\n        key: 1,\n        text: 'Civil Engineering',\n        value: 'civil'\n      }, {\n        key: 1,\n        text: 'Computer Science',\n        value: 'cs'\n      }, {\n        key: 1,\n        text: 'Bio-Medical Engineering',\n        value: 'bme'\n      }]\n    };\n    return _this;\n  }\n\n  _createClass(SignUp, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          isLoading = _this$state.isLoading,\n          email = _this$state.email,\n          emailErrors = _this$state.emailErrors,\n          password = _this$state.password,\n          passwordErrors = _this$state.passwordErrors,\n          errors = _this$state.errors,\n          specializationOptions = _this$state.specializationOptions,\n          collegeOptions = _this$state.collegeOptions,\n          course = _this$state.course,\n          courseErrors = _this$state.courseErrors,\n          college = _this$state.college,\n          workErrors = _this$state.workErrors,\n          work = _this$state.work,\n          nameErrors = _this$state.nameErrors,\n          name = _this$state.name;\n      return __jsx(\"div\", {\n        className: \"loginSignup\"\n      }, __jsx(\"div\", {\n        style: {\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          bottom: 0,\n          right: 0\n        }\n      }, __jsx(\"div\", {\n        style: {\n          width: '100%',\n          \"float\": 'right',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center'\n        }\n      }, __jsx(Grid, {\n        centered: true\n      }, __jsx(Grid.Row, {\n        verticalAlign: \"middle\"\n      }, __jsx(Grid.Column, {\n        mobile: 16,\n        tablet: 8,\n        computer: 16\n      }, __jsx(Header, {\n        color: \"yellow\",\n        as: \"h1\",\n        textAlign: \"center\"\n      }, \"Create an account\"), __jsx(Form, {\n        onSubmit: this.onSubmit,\n        error: errors.length > 0,\n        loading: isLoading\n      }, __jsx(Form.Field, null, __jsx(\"lable\", {\n        style: {\n          color: \"yellow\"\n        }\n      }, \"Full Name\"), __jsx(Input, {\n        name: \"email\",\n        type: \"text\",\n        placeholder: \"Full Name\",\n        onChange: this.onChange,\n        value: name,\n        error: nameErrors.length ? nameErrors.join() : null\n      })), __jsx(Form.Field, null, __jsx(\"lable\", {\n        style: {\n          color: \"yellow\"\n        }\n      }, \"Email Address *\"), __jsx(Input, {\n        name: \"email\",\n        type: \"text\",\n        placeholder: \"Email Address\",\n        onChange: this.onChange,\n        value: email,\n        error: emailErrors.length ? emailErrors.join() : null\n      })), __jsx(Form.Field, null, __jsx(\"lable\", {\n        style: {\n          color: \"yellow\"\n        }\n      }, \"Password *\"), __jsx(Input, {\n        name: \"password\",\n        type: \"password\",\n        placeholder: \"Password\",\n        onChange: this.onChange,\n        value: password,\n        error: passwordErrors.length ? passwordErrors.join() : null\n      })), __jsx(Form.Field, null, __jsx(\"label\", {\n        style: {\n          color: \"yellow\"\n        }\n      }, \"College *\"), __jsx(Dropdown, {\n        value: college,\n        options: collegeOptions,\n        label: \"College\",\n        onChange: function onChange(e, _ref) {\n          var value = _ref.value;\n          return _this2.setState({\n            college: value\n          });\n        },\n        fluid: true,\n        placeholder: \"Select your College\",\n        selection: true\n      })), __jsx(Form.Field, null, __jsx(\"label\", {\n        style: {\n          color: \"yellow\"\n        }\n      }, \"Specialization *\"), __jsx(Dropdown, {\n        value: course,\n        options: specializationOptions,\n        label: \"College\",\n        onChange: function onChange(e, _ref2) {\n          var value = _ref2.value;\n          return _this2.setState({\n            course: value\n          });\n        },\n        fluid: true,\n        placeholder: \"Select your Specialization\",\n        selection: true\n      })), __jsx(Form.Field, null, __jsx(\"lable\", {\n        style: {\n          color: \"yellow\"\n        }\n      }, \"Current Company *\"), __jsx(Input, {\n        name: \"password\",\n        type: \"password\",\n        placeholder: \"Password\",\n        onChange: this.onChange,\n        value: password,\n        error: passwordErrors.length ? passwordErrors.join() : null\n      })), __jsx(Form.Field, null, __jsx(\"label\", {\n        style: {\n          color: \"yellow\"\n        }\n      }, \"Company Location*\"), __jsx(Dropdown, {\n        value: college,\n        options: collegeOptions,\n        label: \"College\",\n        onChange: function onChange(e, _ref3) {\n          var value = _ref3.value;\n          return _this2.setState({\n            college: value\n          });\n        },\n        fluid: true,\n        placeholder: \"Select your College\",\n        selection: true\n      })), __jsx(Form.Field, null, __jsx(\"lable\", {\n        style: {\n          color: \"yellow\"\n        }\n      }, \"Designation *\"), __jsx(Input, {\n        name: \"password\",\n        type: \"password\",\n        placeholder: \"Password\",\n        onChange: this.onChange,\n        value: password,\n        error: passwordErrors.length ? passwordErrors.join() : null\n      })), __jsx(Form.Field, null, __jsx(\"lable\", {\n        style: {\n          color: \"yellow\"\n        }\n      }, \"Job Description *\"), __jsx(TextArea, {\n        name: \"password\",\n        type: \"password\",\n        placeholder: \"Password\",\n        onChange: this.onChange,\n        value: password,\n        error: passwordErrors.length ? passwordErrors.join() : null\n      })), __jsx(Form.Field, null, __jsx(\"lable\", {\n        style: {\n          color: \"yellow\"\n        }\n      }, \"Work Experience (if any)\"), __jsx(Input, {\n        name: \"work\",\n        type: \"number\",\n        min: \"0\",\n        step: \"0.1\",\n        placeholder: \"Work Experience\",\n        onChange: this.onChange,\n        value: work,\n        error: workErrors.length ? workErrors.join() : null\n      })), __jsx(Message, {\n        hidden: !errors.length,\n        error: true,\n        list: errors\n      }), __jsx(Form.Button, {\n        content: \"Sign Up\",\n        positive: true,\n        fluid: true\n      })))), __jsx(Grid.Row, null, __jsx(Grid.Column, {\n        mobile: 16,\n        tablet: 8,\n        computer: 8\n      }, __jsx(Divider, {\n        horizontal: true\n      }, __jsx(\"p\", {\n        style: {\n          color: \"white\"\n        }\n      }, \"Or\")), __jsx(Grid, {\n        columns: 1\n      }, __jsx(Grid.Column, null, __jsx(Header, {\n        inverted: true,\n        as: \"h5\",\n        textAlign: \"center\"\n      }, \"Already have an account?\", __jsx(Link, {\n        href: \"/login\",\n        passHref: true\n      }, __jsx(\"a\", {\n        title: \"Log In\"\n      }, \" Log In\")))))))))));\n    }\n  }]);\n\n  return SignUp;\n}(React.PureComponent);\n\nexport default withRouter(SignUp);","map":null,"metadata":{},"sourceType":"module"}