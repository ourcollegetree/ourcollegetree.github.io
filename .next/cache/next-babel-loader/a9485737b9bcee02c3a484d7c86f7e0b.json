{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Link from 'next/link';\nimport Router, { withRouter } from 'next/router';\nimport { connect } from 'react-redux';\nimport Axios from 'axios';\nimport { Image, Grid, Container, Input, Header, Divider, Form, Message } from 'semantic-ui-react';\nimport Api from '../../config/Api';\nimport { updateUser } from './LoginSlice';\nimport { setCookie } from '../../libs/cookies/cookieHelpers';\n\nclass Login extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onChange\", e => {\n      const {\n        name,\n        value\n      } = e.target;\n      const nameErrors = `${name}Errors`;\n      this.setState({\n        [name]: value,\n        [nameErrors]: [],\n        errors: []\n      });\n    });\n\n    _defineProperty(this, \"onSubmit\", () => {\n      const {\n        username,\n        password\n      } = this.state;\n      const {\n        router: {\n          query,\n          query: {\n            next\n          }\n        }\n      } = this.props;\n      const {\n        updateUser: updateUserAction\n      } = this.props;\n      this.setState({\n        isLoading: true\n      });\n      Axios.post(Api.userLogin, {\n        username,\n        password\n      }).then(({\n        data: {\n          key,\n          details\n        }\n      }) => {\n        console.log(\"key\", key);\n        setCookie(key);\n        updateUserAction({\n          isLoggedIn: true,\n          accessToken: key,\n          userDetails: details\n        });\n        Router.push('/');\n      }).catch(({\n        response: {\n          data,\n          status,\n          statusText\n        }\n      }) => {\n        console.log(\"login error\", data);\n      }).finally(() => {\n        this.setState({\n          isLoading: false\n        });\n      });\n    });\n\n    this.state = {\n      isLoading: false,\n      username: '',\n      usernameErrors: [],\n      password: '',\n      passwordErrors: [],\n      errors: []\n    };\n  }\n\n  render() {\n    const {\n      isLoading,\n      username,\n      password,\n      usernameErrors,\n      passwordErrors,\n      errors\n    } = this.state;\n    return __jsx(\"div\", {\n      className: \"loginSignup\"\n    }, __jsx(\"div\", {\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        bottom: 0,\n        right: 0\n      }\n    }, __jsx(\"div\", {\n      style: {\n        width: '100%',\n        float: 'right',\n        height: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center'\n      }\n    }, __jsx(Grid, {\n      centered: true\n    }, __jsx(Grid.Row, {\n      verticalAlign: \"middle\"\n    }, __jsx(Grid.Column, {\n      mobile: 16,\n      tablet: 8,\n      computer: 16\n    }, __jsx(Header, {\n      color: \"yellow\",\n      as: \"h1\",\n      textAlign: \"center\"\n    }, \"Login\"), __jsx(Form, {\n      onSubmit: this.onSubmit,\n      error: errors.length > 0,\n      loading: isLoading\n    }, __jsx(Form.Field, null, __jsx(\"lable\", {\n      style: {\n        color: \"yellow\"\n      }\n    }, \"Username\"), __jsx(Input, {\n      name: \"username\",\n      type: \"text\",\n      placeholder: \"Username\",\n      onChange: this.onChange,\n      value: username,\n      error: usernameErrors.length ? usernameErrors.join() : null\n    })), __jsx(Form.Field, null, __jsx(\"lable\", {\n      style: {\n        color: \"yellow\"\n      }\n    }, \"Password\"), __jsx(Input, {\n      name: \"password\",\n      type: \"password\",\n      placeholder: \"Password\",\n      onChange: this.onChange,\n      value: password,\n      error: passwordErrors.length ? passwordErrors.join() : null\n    })), __jsx(Message, {\n      hidden: !errors.length,\n      error: true,\n      list: errors\n    }), __jsx(Form.Button, {\n      content: \"Log In\",\n      positive: true,\n      fluid: true\n    })))), __jsx(Grid.Row, null, __jsx(Grid.Column, {\n      mobile: 16,\n      tablet: 8,\n      computer: 8\n    }, __jsx(Divider, {\n      horizontal: true\n    }, __jsx(\"p\", {\n      style: {\n        color: \"white\"\n      }\n    }, \"Or\")), __jsx(Grid, {\n      columns: 1\n    }, __jsx(Grid.Column, null, __jsx(Header, {\n      as: \"h5\",\n      textAlign: \"center\"\n    }, __jsx(Link, {\n      href: \"/user/forgot-password\",\n      passHref: true\n    }, __jsx(\"a\", {\n      title: \"Forgot Password\"\n    }, \"Forgot Password?\")))))))))));\n  }\n\n}\n\nconst mapStateToProps = null;\nconst mapDispatchToProps = {\n  updateUser\n};\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Login));","map":null,"metadata":{},"sourceType":"module"}