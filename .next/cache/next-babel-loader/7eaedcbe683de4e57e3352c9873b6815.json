{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Grid, Form, Button, Input } from 'semantic-ui-react';\nimport React from 'react';\nimport Router, { withRouter } from 'next/router';\nimport { connect } from 'react-redux';\nimport Axios from 'axios';\nimport Api from '../../config/Api';\n\nvar ContactUsComp = /*#__PURE__*/function (_React$Component) {\n  _inherits(ContactUsComp, _React$Component);\n\n  var _super = _createSuper(ContactUsComp);\n\n  function ContactUsComp(props) {\n    var _this;\n\n    _classCallCheck(this, ContactUsComp);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"onValueChange\", function (event) {\n      var _this$setState;\n\n      var _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value;\n      var nameErrors = \"\".concat(name, \"Errors\");\n\n      _this.setState((_this$setState = {}, _defineProperty(_this$setState, name, value), _defineProperty(_this$setState, nameErrors, []), _defineProperty(_this$setState, \"errors\", []), _this$setState));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\", function () {\n      var _this$state = _this.state,\n          email = _this$state.email,\n          name = _this$state.name,\n          phone = _this$state.phone,\n          feedback = _this$state.feedback;\n      Axios.post(Api.contactUs, {\n        name: name,\n        phone: phone,\n        email: email\n      }).then(function (_ref) {\n        var data = _ref.data;\n        Router.replace('/thankyou');\n      })[\"catch\"](function (_ref2) {\n        var _ref2$response = _ref2.response,\n            data = _ref2$response.data,\n            status = _ref2$response.status,\n            statusText = _ref2$response.statusText;\n\n        if (status === 400 && data && Object.keys(data).length > 0) {\n          if (Object.prototype.hasOwnProperty.call(data, 'email')) {\n            _this.setState({\n              emailErrors: data.email\n            });\n          }\n\n          if (Object.prototype.hasOwnProperty.call(data, 'name')) {\n            _this.setState({\n              nameErrors: data.name\n            });\n          }\n\n          if (Object.prototype.hasOwnProperty.call(data, 'phone')) {\n            _this.setState({\n              phoneErrors: data.phone\n            });\n          }\n\n          if (Object.prototype.hasOwnProperty.call(data, 'non_field_errors')) {\n            _this.setState({\n              errors: data.non_field_errors\n            });\n          }\n        } else {\n          _this.setState({\n            errors: [statusText, 'Please try later']\n          });\n        }\n      });\n    });\n\n    _this.state = {\n      email: '',\n      name: '',\n      phone: '',\n      feedback: '',\n      emailErrors: [],\n      nameErrors: [],\n      phoneErrors: []\n    };\n    _this.onValueChange = _this.onValueChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(ContactUsComp, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n          email = _this$state2.email,\n          name = _this$state2.name,\n          phone = _this$state2.phone,\n          feedback = _this$state2.feedback,\n          emailErrors = _this$state2.emailErrors,\n          nameErrors = _this$state2.nameErrors,\n          phoneErrors = _this$state2.phoneErrors,\n          errors = _this$state2.errors;\n      return __jsx(\"div\", null, __jsx(\"div\", {\n        className: \"contactUsComp\"\n      }, __jsx(\"div\", {\n        style: {\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          bottom: 0,\n          right: 0\n        }\n      }, __jsx(\"div\", {\n        style: {\n          width: '100%',\n          height: '100%',\n          textAlign: 'center',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center'\n        }\n      }, __jsx(\"div\", {\n        style: {\n          width: '80%'\n        },\n        className: \"textOnImg\"\n      }, __jsx(\"p\", {\n        style: {\n          color: 'yellow'\n        }\n      }, \"Contact Us\"), __jsx(Grid, {\n        centered: true,\n        columns: 1\n      }, __jsx(Grid.Column, {\n        mobile: \"16\",\n        tablet: \"12\",\n        computer: \"6\"\n      }, __jsx(Form, {\n        size: \"large\"\n      }, __jsx(Form.Field, null, __jsx(Input, {\n        name: \"email\",\n        value: email,\n        placeholder: \"E-mail\",\n        onChange: this.onValueChange,\n        error: emailErrors.length ? emailErrors.join() : null\n      })), __jsx(Form.Input, {\n        name: \"name\",\n        value: name,\n        placeholder: \"Name\",\n        onChange: this.onValueChange,\n        error: nameErrors.length ? nameErrors : null\n      }), __jsx(Form.Input, {\n        name: \"phone\",\n        value: phone,\n        placeholder: \"Mobile No.\",\n        onChange: this.onValueChange,\n        error: phoneErrors.length ? phoneErrors : null\n      }), __jsx(Form.TextArea, {\n        name: \"feedback\",\n        value: feedback,\n        placeholder: \"Feedback\",\n        onChange: this.onValueChange\n      }), __jsx(Button, {\n        positive: true,\n        fluid: true,\n        size: \"large\",\n        onClick: this.onSubmit\n      }, \"Submit\")))), __jsx(\"br\", null))))));\n    }\n  }]);\n\n  return ContactUsComp;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var _state$user = state.user,\n      isLoggedIn = _state$user.isLoggedIn,\n      userDetails = _state$user.userDetails;\n  return {\n    isLoggedIn: isLoggedIn,\n    userDetails: userDetails\n  };\n};\n\nvar mapDispatchToProps = {};\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(ContactUsComp));","map":null,"metadata":{},"sourceType":"module"}