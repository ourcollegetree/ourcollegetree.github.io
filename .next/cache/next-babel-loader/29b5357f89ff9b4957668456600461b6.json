{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Link from 'next/link';\nimport { withRouter } from 'next/router';\nimport { Image, Grid, Form, Input, Message, Header, Divider, Dropdown, TextArea } from 'semantic-ui-react';\n\nclass SignUp extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onChange\", e => {\n      const {\n        name,\n        value\n      } = e.target;\n      const nameErrors = `${name}Errors`;\n      this.setState({\n        [name]: value,\n        [nameErrors]: [],\n        errors: []\n      });\n    });\n\n    this.state = {\n      isLoading: false,\n      email: '',\n      emailErrors: [],\n      password: '',\n      passwordErrors: [],\n      errors: [],\n      college: '',\n      collegeErrors: [],\n      work: '',\n      workErrors: [],\n      name: '',\n      nameErrors: [],\n      collegeOptions: [{\n        key: 1,\n        text: 'Osmania University',\n        value: 'ou'\n      }],\n      course: '',\n      courseErrors: [],\n      specializationOptions: [{\n        key: 1,\n        text: 'Electronics & Communications',\n        value: 'ece'\n      }, {\n        key: 1,\n        text: 'Electrical Engineering',\n        value: 'eee'\n      }, {\n        key: 1,\n        text: 'Mechanical Engineering',\n        value: 'mech'\n      }, {\n        key: 1,\n        text: 'Civil Engineering',\n        value: 'civil'\n      }, {\n        key: 1,\n        text: 'Computer Science',\n        value: 'cs'\n      }, {\n        key: 1,\n        text: 'Bio-Medical Engineering',\n        value: 'bme'\n      }]\n    };\n  }\n\n  render() {\n    const {\n      isLoading,\n      email,\n      emailErrors,\n      password,\n      passwordErrors,\n      errors,\n      specializationOptions,\n      collegeOptions,\n      course,\n      courseErrors,\n      college,\n      workErrors,\n      work,\n      nameErrors,\n      name\n    } = this.state;\n    return __jsx(\"div\", {\n      className: \"loginSignup\"\n    }, __jsx(\"div\", {\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        bottom: 0,\n        right: 0\n      }\n    }, __jsx(\"div\", {\n      style: {\n        width: '100%',\n        float: 'right',\n        height: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center'\n      }\n    }, __jsx(Grid, {\n      centered: true\n    }, __jsx(Grid.Row, {\n      verticalAlign: \"middle\"\n    }, __jsx(Grid.Column, {\n      mobile: 16,\n      tablet: 8,\n      computer: 16\n    }, __jsx(Header, {\n      color: \"yellow\",\n      as: \"h1\",\n      textAlign: \"center\"\n    }, \"Create an account\"), __jsx(Form, {\n      onSubmit: this.onSubmit,\n      error: errors.length > 0,\n      loading: isLoading\n    }, __jsx(Form.Field, null, __jsx(\"lable\", {\n      style: {\n        color: \"yellow\"\n      }\n    }, \"Full Name\"), __jsx(Input, {\n      name: \"email\",\n      type: \"text\",\n      placeholder: \"Full Name\",\n      onChange: this.onChange,\n      value: name,\n      error: nameErrors.length ? nameErrors.join() : null\n    })), __jsx(Form.Field, null, __jsx(\"lable\", {\n      style: {\n        color: \"yellow\"\n      }\n    }, \"Email Address *\"), __jsx(Input, {\n      name: \"email\",\n      type: \"text\",\n      placeholder: \"Email Address\",\n      onChange: this.onChange,\n      value: email,\n      error: emailErrors.length ? emailErrors.join() : null\n    })), __jsx(Form.Field, null, __jsx(\"lable\", {\n      style: {\n        color: \"yellow\"\n      }\n    }, \"Password *\"), __jsx(Input, {\n      name: \"password\",\n      type: \"password\",\n      placeholder: \"Password\",\n      onChange: this.onChange,\n      value: password,\n      error: passwordErrors.length ? passwordErrors.join() : null\n    })), __jsx(Form.Field, null, __jsx(\"label\", {\n      style: {\n        color: \"yellow\"\n      }\n    }, \"College *\"), __jsx(Dropdown, {\n      value: college,\n      options: collegeOptions,\n      label: \"College\",\n      onChange: (e, {\n        value\n      }) => this.setState({\n        college: value\n      }),\n      fluid: true,\n      placeholder: \"Select your College\",\n      selection: true\n    })), __jsx(Form.Field, null, __jsx(\"label\", {\n      style: {\n        color: \"yellow\"\n      }\n    }, \"Specialization *\"), __jsx(Dropdown, {\n      value: course,\n      options: specializationOptions,\n      label: \"College\",\n      onChange: (e, {\n        value\n      }) => this.setState({\n        course: value\n      }),\n      fluid: true,\n      placeholder: \"Select your Specialization\",\n      selection: true\n    })), __jsx(Form.Field, null, __jsx(\"lable\", {\n      style: {\n        color: \"yellow\"\n      }\n    }, \"Current Company *\"), __jsx(Input, {\n      name: \"password\",\n      type: \"password\",\n      placeholder: \"Password\",\n      onChange: this.onChange,\n      value: password,\n      error: passwordErrors.length ? passwordErrors.join() : null\n    })), __jsx(Form.Field, null, __jsx(\"label\", {\n      style: {\n        color: \"yellow\"\n      }\n    }, \"Company Location*\"), __jsx(Dropdown, {\n      value: college,\n      options: collegeOptions,\n      label: \"College\",\n      onChange: (e, {\n        value\n      }) => this.setState({\n        college: value\n      }),\n      fluid: true,\n      placeholder: \"Select your College\",\n      selection: true\n    })), __jsx(Form.Field, null, __jsx(\"lable\", {\n      style: {\n        color: \"yellow\"\n      }\n    }, \"Designation *\"), __jsx(Input, {\n      name: \"password\",\n      type: \"password\",\n      placeholder: \"Password\",\n      onChange: this.onChange,\n      value: password,\n      error: passwordErrors.length ? passwordErrors.join() : null\n    })), __jsx(Form.Field, null, __jsx(\"lable\", {\n      style: {\n        color: \"yellow\"\n      }\n    }, \"Job Description *\"), __jsx(TextArea, {\n      name: \"password\",\n      type: \"password\",\n      placeholder: \"Password\",\n      onChange: this.onChange,\n      value: password,\n      error: passwordErrors.length ? passwordErrors.join() : null\n    })), __jsx(Form.Field, null, __jsx(\"lable\", {\n      style: {\n        color: \"yellow\"\n      }\n    }, \"Work Experience (if any)\"), __jsx(Input, {\n      name: \"work\",\n      type: \"number\",\n      min: \"0\",\n      step: \"0.1\",\n      placeholder: \"Work Experience\",\n      onChange: this.onChange,\n      value: work,\n      error: workErrors.length ? workErrors.join() : null\n    })), __jsx(Message, {\n      hidden: !errors.length,\n      error: true,\n      list: errors\n    }), __jsx(Form.Button, {\n      content: \"Sign Up\",\n      positive: true,\n      fluid: true\n    })))), __jsx(Grid.Row, null, __jsx(Grid.Column, {\n      mobile: 16,\n      tablet: 8,\n      computer: 8\n    }, __jsx(Divider, {\n      horizontal: true\n    }, __jsx(\"p\", {\n      style: {\n        color: \"white\"\n      }\n    }, \"Or\")), __jsx(Grid, {\n      columns: 1\n    }, __jsx(Grid.Column, null, __jsx(Header, {\n      inverted: true,\n      as: \"h5\",\n      textAlign: \"center\"\n    }, \"Already have an account?\", __jsx(Link, {\n      href: \"/login\",\n      passHref: true\n    }, __jsx(\"a\", {\n      title: \"Log In\"\n    }, \" Log In\")))))))))));\n  }\n\n}\n\nexport default withRouter(SignUp);","map":null,"metadata":{},"sourceType":"module"}